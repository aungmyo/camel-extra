= Guice JNDI =

The Guice JNDI provider makes it easy to create a JNDI context using Guice as the dependency injection mechanism.

== Creating the Guice Injector ==

== Binding to @Named injection points ==

The entries in the jndi.properties file will be used to bind any @Named injection points in your guice beans.

== Exposing intances from the Injector into JNDI ==

By default any @Named instance will be exposed in JNDI using the naming convention

{{{
className/name
}}}

In addition you can attach the @JndiBind annotation to any class or provider method to expose objects directly into JNDI.

For example

{{{
@JndiBind("cheese")
public class Cheese {

  @Inject
  public Cheese(@Named("cheese.type") String type) {...
  }
}
}}}

The Cheese object will be bound to the JNDI name "cheese" and be injected with the "cheese.type" entry in the jndi.properties file.

Another option is to use the annotation in a module

{{{
public class ExampleModule extends AbstractModule {
  ...

  @Provides
  @JndiBind("blah")
  public MyBean makeBlah() {
    return new MyBean(new AnotherBean("Blah.another"), "Blah");
  }
}
}}}

Which will bind the result of makeBlah() to the JNDI name  "blah" 